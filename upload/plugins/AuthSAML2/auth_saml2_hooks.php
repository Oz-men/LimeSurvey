
<?php
/*
 * SAML2 Authentication plugin for LimeSurvey
 * Copyright (C) 2025 Sixto Pablo Martin Garcia <sixto.martin.garcia@gmail.com>
 */

if (!defined('BASEPATH')) {
    exit('No direct script access allowed');
}

// Use this hook to retrieve/modify groups to be assigned to the logged user
function auth_saml2_hook_extend_groups($authSaml, $attributes, $groups, $oUser)
{
    return $groups;
}

// Use this hook to retrieve/modify permissions to be assigned to the logged user
function auth_saml2_hook_extend_permissions($authSaml, $attributes, $permision_matrix)
{
    return $permision_matrix;
}

// Use this hook to verify/modify user data (name, mail, lang)
function auth_saml2_hook_modify_userdata($authSaml, $attributes, $user_data)
{
    return $user_data;
}

// Use this hook to authorize a user that already exists
function auth_saml2_hook_authorize_user($authSaml, $attributes, $user_data, $oUser)
{
    $groupOid = 'urn:oid:1.3.6.1.4.1.25374.2.0.0.1.3.2.987.1'; // Gruppen-Attribut-OID groupUHH
    $allowedGroupName = 'O-UHH-ZE-RRZ-APP-PAE-LS-Mitarbeiter';

    if (isset($attributes[$groupOid])) {
        $userGroups = $attributes[$groupOid];

        if (in_array($allowedGroupName, $userGroups)) {
            // Zugang erlauben
            return true;
        } else {
            // Zugang verweigern, Gruppe nicht vorhanden
            return false;
        }
    } else {
        // Kein Gruppen-Attribut -> Zugang verweigern
        return false;
    }
}

// Use this hook to authorize user creation
function auth_saml2_hook_authorize_user_creation($authSaml, $attributes, $user_data)
{
    $authorized = true;
    return $authorized;
}


// Use this hook to modify something from the user object before log in
function auth_saml2_hook_before_successfully_login($authSaml, $attributes, $oUser, $updating)
{
    $allowedThemes = ['UniHH','UniHH_bwl','UniHH_Psycho_BewWiss'];

    // Globales Standardtheme aus den Einstellungen holen
    $defaultTheme = getGlobalSetting('defaulttheme');

    // Sicherstellen, dass das Standardtheme auch in allowedThemes ist
    if (!in_array($defaultTheme, $allowedThemes)) {
        $allowedThemes[] = $defaultTheme;
    }

    foreach ($allowedThemes as $theme) {
        $exists = Permission::model()->count('uid = :uid AND entity = :entity AND permission = :permission', [
            ':uid' => $oUser->uid,
            ':entity' => 'template',
            ':permission' => $theme
        ]);

        if ($exists == 0) {
            Permission::model()->insertSomeRecords([
                'uid'        => $oUser->uid,
                'entity'     => 'template',
                'entity_id'  => 0,
                'permission' => $theme,
                'read_p'     => 1
            ]);
        }
    }

    return $oUser;
}


// Use this hook to implement a custom discovery page. Print the html page you want to show
// Note that the SAML init URL specific IdP is generated by $baseLoginUrl + "/idp" + id
function auth_saml2_hook_custom_discovery_page($authSaml, $IdPsData, $baseLoginUrl, $request) {
    /*
    if (!isset($request)) {
        echo CHtml::beginForm('', 'post', []);
        echo CHtml::label(gT("Enter user input:"), 'lang', array('class'=>" control-label"));
        echo CHtml::tag('br');
        echo CHtml::textField('user_input');
        echo CHtml::submitButton(gT("Search IdP", 'unescaped'), array('name' => "Search IdP", 'class' => 'btn btn-success'));
        echo CHtml::endForm();
    } else {
        $user_input = $request->getPost('user_input');
        // Logic to convert $user_input into the idp id, in this case we select id=1
        App()->controller->redirect($baseLoginUrl.'&idp=1');
    }
    */
    return;
}

